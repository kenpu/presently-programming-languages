{
    "type": "article",
    "source": "noLabel: \n...........\nFrom Types to Computation",
    "children": [
        {
            "type": "page",
            "source": "About",
            "children": [
                {
                    "type": "section",
                    "source": "",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "c: narrow center\n...................\nIn this section, we want to discuss different ways data can be created, managed, transformed and modified.",
                                    "uuid": "f6948934-e6a5-49b7-ae14-8c1f3396d646",
                                    "version": 0
                                }
                            ],
                            "uuid": "0360af56-a3f0-4fcb-9492-8d778ad2f79d",
                            "version": 0
                        }
                    ],
                    "uuid": "f4c9e3cf-3fab-4719-95ea-7a6670a8f954",
                    "version": 0
                }
            ],
            "uuid": "2951ef07-1597-440d-88b8-ab05759e2183",
            "version": 0
        },
        {
            "type": "page",
            "source": "Values",
            "children": [
                {
                    "type": "section",
                    "source": "Literals",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "Literals are values that are specified as part of the program.",
                                    "uuid": "1a2133b5-0ef0-4ca7-88b8-eed8f816968d",
                                    "version": 0
                                },
                                {
                                    "type": "markdown",
                                    "source": "Typically, a programming language supports literal values for:\n\n> - scalar types: numerics and string\n- lists\n- maps\n- records\n- tuples",
                                    "uuid": "5aefdaa8-a649-475d-8f5c-9161a2e0bbb3",
                                    "version": 0
                                }
                            ],
                            "uuid": "16ba3271-1530-4415-b9a1-76f32c21a5c7",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "w: 2 2 1\n...........\nSome examples",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "c: wide\n...........\n~~~\n\"hello world\"\n3.1415\n1.0f\n42\n~~~",
                                    "uuid": "5d5b0aeb-1776-423d-9176-6c0b237bceb0",
                                    "version": 0
                                },
                                {
                                    "type": "markdown",
                                    "source": "c: wide\n............\n~~~\n[1, 2, 3]\n\n{\n  \"hello\": 1.0,\n  \"world\": -1.0\n}\n~~~",
                                    "uuid": "9392c279-4a34-4559-b70c-8167fd58c961",
                                    "version": 0
                                },
                                {
                                    "type": "markdown",
                                    "source": "css:\n  color: blue\n......................\nThese are not the syntax of any language in particular.",
                                    "uuid": "f40614e2-1790-4951-9f09-b61a0dcdb947",
                                    "version": 0
                                }
                            ],
                            "uuid": "cdf46895-b94d-43a3-b66b-2e463a0fea96",
                            "version": 0
                        }
                    ],
                    "uuid": "7c2fa44c-84a5-49f3-b2bd-5b86202160e0",
                    "version": 0
                },
                {
                    "type": "section",
                    "source": "Symbols",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "- Symbols can be declared.\n- They are _aliases_ to data.\n\n*****\n\n> <note /> A *binding* is a mapping of a symbol to the piece of *typed* data that it represents.\n\n",
                                    "uuid": "bf6af92c-2e8e-419a-9367-cfb376ff50f4",
                                    "version": 2
                                },
                                {
                                    "type": "markdown",
                                    "source": "*Examples*\n~~~\nx = 3:Int\ny = [1,2,3]:List[Float]\n~~~\n\n- The symbol `x` is bound to the value `3:Int`.\n- There are two symbols declared and bound to values.",
                                    "uuid": "9781d8d4-4bfb-45e7-8aeb-314c8428d91f",
                                    "version": 50
                                }
                            ],
                            "uuid": "f8d4c28e-1199-4873-aba3-ec1df06abeac",
                            "version": 52
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "1. Declaration of symbols\n1. Intiailization of symbols\n2. Resolution of symbols\n1. Modification of the binding of symbols",
                                    "uuid": "9964d7fb-bc5f-420f-9073-b705e3991bc4",
                                    "version": 0
                                }
                            ],
                            "uuid": "c43fab79-d842-4e8c-99ca-5ca3f24f9d68",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "w: 2 3",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "- Declaration\n  > ~~~\n    var x: Map[String,Int]\n    var y\n    ~~~\n\n- Initializatin\n  > All symbols must be bound to a value.\n  > ~~~\n    x = Map(\n      \"A\" -> 65,\n      \"B\" -> 66)\n    ~~~\n",
                                    "uuid": "f393ed46-cf09-4a92-bd8a-f764ff5bed2a",
                                    "version": 0
                                },
                                {
                                    "type": "markdown",
                                    "source": "- Resolution.\n  > With `x` bound to a value, we can refer to `x` just as we refer to the value.\n  ~~~\n  get(x, \"A\")\n  set(x, \"C\", 67)\n  ~~~\n  \n- Modification\n  > One can change the binding of `x` to a new piece of data.\n  ~~~\n  var x\n  x = 2\n  x = \"Hello world\"\n  ~~~",
                                    "uuid": "d23449e9-0860-4ef8-90d0-09277adc2fc9",
                                    "version": 0
                                }
                            ],
                            "uuid": "46db2732-c519-4f05-96af-792e6828bc9f",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "> <note/> A symbol table is a collection bindings.",
                                    "uuid": "cb239ae7-8cbd-4aa2-80f4-1175b8ece525",
                                    "version": 0
                                }
                            ],
                            "uuid": "6cee766e-d410-4807-beb6-09f7e48109c8",
                            "version": 0
                        }
                    ],
                    "uuid": "78ae5762-98b1-4c87-b326-bbb07d9d9016",
                    "version": 52
                }
            ],
            "uuid": "2698250b-0ec3-47db-bcaa-9797bc1e8969",
            "version": 52
        },
        {
            "type": "page",
            "source": "Functions",
            "children": [
                {
                    "type": "section",
                    "source": "About functions",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "Traditional procedural programming vs. functional programming",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "- Procedural\n  > Distinct parts of the language for\n  > 1. values\n  > 2. functions (and statements)\n  > 3. flow control\n  \nFunction symbols get special syntax and life-cycle.",
                                    "uuid": "39d4ea2a-ca06-4040-8ac5-d368a29e5949",
                                    "version": 0
                                },
                                {
                                    "type": "markdown",
                                    "source": "- Functional\n  > Unified type system and expression syntax\n  for everything.\n  >\n  > 1. No distinction between functions and values.\n  > 2. May not have explicit flow control.\n\nFunction symbols follow the same life-cycle as value symbols.",
                                    "uuid": "ca5f707c-e676-448a-86cc-e03f30a60525",
                                    "version": 0
                                }
                            ],
                            "uuid": "07dbb47c-8fd7-4293-a697-8e688f2ae33b",
                            "version": 0
                        }
                    ],
                    "uuid": "1ee3e22b-1cc1-40ed-a870-1e0d8c3640f9",
                    "version": 0
                },
                {
                    "type": "section",
                    "source": "Declaration",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "w: 1 0\n...........\n- Functions are _almost_ aways bound to symbols.\n- The declaration of a function introduces the symbol that *will* be bound to a function of a specific type.",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "- C / C++\n  > ~~~\n    int sumInts(int[] nums);\n    ~~~",
                                    "uuid": "7ce26ced-361c-4efa-acf7-a73816216177",
                                    "version": 0
                                },
                                {
                                    "type": "markdown",
                                    "source": "- A language supporting unified type system \n\n  > ~~~\n    var sumInt: Func[Array[Int] nums -> Int]\n    ~~~\n",
                                    "uuid": "c445c103-1d68-4aca-96b5-731162b64c17",
                                    "version": 0
                                }
                            ],
                            "uuid": "c5fd9d6c-a01b-40b8-b064-133f29fdf6af",
                            "version": 0
                        }
                    ],
                    "uuid": "72d78221-1e9d-4522-a314-693311ef1eea",
                    "version": 0
                },
                {
                    "type": "section",
                    "source": "Defining",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "w: 1 1 0",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "- Function expressions evaluate to a _function_.\n- Functions are defined as:\n    1. Parameters (and return value)\n    2. Body of the function\n",
                                    "uuid": "a929d7d2-208c-444c-bf8a-7ea234be2f35",
                                    "version": 0
                                },
                                {
                                    "type": "markdown",
                                    "source": "- Parameters of the function introduce bindings to _scope_ <sup><span class=\"fa fa-bolt\"></span></sup> of the body of the fuction.\n\n- The body determines the return value.\n\n- *Recursion*: \n  > The body of a function can invoke the function itself.",
                                    "uuid": "6145e5b7-0191-4a09-843e-9729731d2d98",
                                    "version": 0
                                },
                                {
                                    "type": "markdown",
                                    "source": "css:\n  color: blue\n  width: 150\n.................\n<span class=\"fa fa-bolt\"></span> More about scopes later.",
                                    "uuid": "21f7c46e-e55d-419d-997d-09af669b3817",
                                    "version": 0
                                }
                            ],
                            "uuid": "9ba0a2b4-8412-4a72-81b1-2055ee7a88ec",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "w: 0 0",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "Procedural\n\n~~~\nint sumInt(int[] nums) {\n  int total = 0;\n  for(int i=0; i < nums.length; i++) {\n    total += nums[i];\n  }\n  return i;\n}\n~~~",
                                    "uuid": "1eea118b-b7f2-4e10-99e6-f52832da929d",
                                    "version": 0
                                },
                                {
                                    "type": "markdown",
                                    "source": "Functional / recursive\n\n~~~\nvar sumInt = func(List[Int] nums) {\n  return if(nums.length == 0) then 0\n         else nums[0] + sumInt(nums[1..])\n}\n~~~",
                                    "uuid": "d6fb3341-ca6f-4b56-95e9-858d1dec52b5",
                                    "version": 0
                                }
                            ],
                            "uuid": "d2c437b7-24b1-4999-9a5c-7626512cda75",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "",
                                    "uuid": "b4af2db4-269b-4a42-bce8-e4d8456fe583",
                                    "version": 0
                                }
                            ],
                            "uuid": "a57f7130-3a33-4f9e-8dfc-6ed6d22d7ed1",
                            "version": 0
                        }
                    ],
                    "uuid": "edfdcf84-e60e-495b-9b56-236e85b6d05f",
                    "version": 0
                },
                {
                    "type": "section",
                    "source": "Invocation & composition of functions",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "- Function invocation.\n  ~~~\n  sumInt([1,2,3])\n  ~~~\n\n- Composition of functions.\n  ~~~\n  sumInt([sumInt[1,2,3], 4, 5])\n  ~~~",
                                    "uuid": "ab264ecc-c9bf-4584-a14f-ccfdf4885127",
                                    "version": 0
                                }
                            ],
                            "uuid": "c0f3c6b9-4d2c-4cfe-961c-7077e36057bb",
                            "version": 0
                        }
                    ],
                    "uuid": "9440e188-b791-410a-9aea-bc9e77c43671",
                    "version": 0
                }
            ],
            "uuid": "bf5032b2-b8b1-487f-9f64-4b544bb2fb11",
            "version": 0
        },
        {
            "type": "page",
            "source": "Scopes",
            "children": [
                {
                    "type": "section",
                    "source": "math: 1\n..............\nContext of expressions",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "> <note/> The _context_ of an expression $e$ is the collection of _bound_ symbols that can be used in the expression.",
                                    "uuid": "96365e3c-3809-4887-b5c7-336ae33a5420",
                                    "version": 213
                                }
                            ],
                            "uuid": "10111686-3aa6-4c32-976b-3054cdec0c2d",
                            "version": 215
                        }
                    ],
                    "uuid": "96109da5-d1d5-4cad-a7b7-d8dafbc28a71",
                    "version": 250
                },
                {
                    "type": "section",
                    "source": "math:\n..........\nScope of a symbol",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "The scope of a binding refers all the expression in which the symbol can be used in that binding.\n\nIn other words, the _scope_ of a symbol $x$ is all the expressions $e$ such that $x\\in\\mathrm{context}(e)$.",
                                    "uuid": "125f2078-66d6-4277-af47-24d4459ce739",
                                    "version": 284
                                }
                            ],
                            "uuid": "51ae5002-9593-415c-b4e8-345a52c22383",
                            "version": 286
                        }
                    ],
                    "uuid": "01f01e36-93a3-4fd8-aa3a-439231b7f855",
                    "version": 356
                },
                {
                    "type": "section",
                    "source": "math:\n.........\nScoping rule for functions",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "w: 2 1",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "- Let a function $f$ be defined inside an expression $E_1$.\n- The body of $f$ has the following context:\n  1. It contains all the symbols which are the parameters of $f$.\n  2. It contains all the symbols declared inside the body of $f$.\n  3. It contains all the symbols from the context of $E_1$.",
                                    "uuid": "81e50be1-1b2b-4b86-8603-d4c3c7798fca",
                                    "version": 323
                                },
                                {
                                    "type": "markdown",
                                    "source": "**Note**: function body inherits the context of the expression that defines the function.\n\nThis is called _lexical scoping_.",
                                    "uuid": "71516274-a3d2-45d6-bd25-d671faa80c4c",
                                    "version": 236
                                }
                            ],
                            "uuid": "69cc1dd4-3e69-4bba-9d20-c1b626ebace0",
                            "version": 570
                        }
                    ],
                    "uuid": "a341076d-d57e-40b1-938d-c49312834762",
                    "version": 616
                }
            ],
            "uuid": "fe1750ce-54b2-4611-bf9c-8171287789e8",
            "version": 1225
        },
        {
            "type": "page",
            "source": "Summary",
            "children": [
                {
                    "type": "section",
                    "source": "",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "- Expressions\n  - Values\n  - Functions\n",
                                    "uuid": "4ec575b8-4b6e-49fe-8f27-941868cdbee7",
                                    "version": 275
                                },
                                {
                                    "type": "markdown",
                                    "source": "- Symbols\n  - Declaration\n  - Binding to expressions\n  - Resolution\n  - Rebinding\n- Scopes\n  - Context of expressions\n  - Lexical scoping",
                                    "uuid": "ee65ba09-8eb7-47d2-9e59-01d5bb530d8d",
                                    "version": 3
                                }
                            ],
                            "uuid": "d29c7825-a8ac-4a6e-9209-6b4195422ee1",
                            "version": 281
                        }
                    ],
                    "uuid": "ca7d10df-99a8-4aaa-993c-9e52dda9251b",
                    "version": 290
                }
            ],
            "uuid": "a75fab7f-89b1-4080-9963-d513ae462186",
            "version": 300
        }
    ],
    "uuid": "dbab3914-eeb6-48d0-a564-48ee578ffc36",
    "modified": true,
    "version": 1578,
    "history": 6
}