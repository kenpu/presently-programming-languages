{
    "type": "article",
    "source": ".................\nScala for programmers",
    "children": [
        {
            "type": "page",
            "source": "About",
            "children": [
                {
                    "type": "section",
                    "source": "Getting the tools",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "w: 1 2",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "- http://www.scala-lang.org/download/\n",
                                    "uuid": "9d5ed8d1-4e83-49ce-9c2c-893f39acfb6d",
                                    "version": 0
                                },
                                {
                                    "type": "code",
                                    "source": "$ mkdir -p $HOME/bin/\n$ cd $HOME/bin/\n$ tar xvfz ~/Download/scala-2.11.7.tgz\n$ export PATH=$PATH:$HOME/bin/scala-2.11.7/bin/",
                                    "uuid": "5eb22f77-b271-497e-bbb1-9145ce57fb68",
                                    "version": 0
                                }
                            ],
                            "uuid": "86e62fdd-bf65-4361-b03e-f36249dc156e",
                            "version": 0
                        }
                    ],
                    "uuid": "3232804c-4159-48b5-bfdb-865e8d8a5132",
                    "version": 0
                }
            ],
            "uuid": "b6dd9280-1fbf-4210-bf04-99b4414be28f",
            "version": 0
        },
        {
            "type": "page",
            "source": "Procedural programming",
            "children": [
                {
                    "type": "section",
                    "source": "Hello world",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "1. Create the source code.\n2. Use `scala` command to run the program.",
                                    "uuid": "b744dc27-407a-4aa3-a242-e4ed01466849",
                                    "version": 0
                                },
                                {
                                    "type": "box",
                                    "layout": "vertical",
                                    "source": "",
                                    "children": [
                                        {
                                            "type": "code",
                                            "source": "// hello.scala\nprintln(\"hello world\")",
                                            "uuid": "0d5ec78e-aec5-4bb4-bc3c-6aa364927027",
                                            "version": 0
                                        },
                                        {
                                            "type": "code",
                                            "source": "$ scala hello.scala\nhello world",
                                            "uuid": "30974e2f-f1f1-49d3-a49a-97a92091ce42",
                                            "version": 0
                                        }
                                    ],
                                    "uuid": "a3a749ae-29da-42ee-9a32-327d02b4972b",
                                    "version": 0
                                }
                            ],
                            "uuid": "2f983f3d-697e-48b2-909d-ae326cc74d27",
                            "version": 0
                        }
                    ],
                    "uuid": "dd9138ca-a586-46ae-9722-58ce1394f3c1",
                    "version": 0
                },
                {
                    "type": "section",
                    "source": "Objects",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "> <note/> Scala is an _object oriented_ language.\n\nScala has seemly complex syntax.  It turns out that they are all special cases of a general way Scala resolves object method invocations.",
                                    "uuid": "69a6b23b-ae03-4cff-8302-78c6c7f63ec3",
                                    "version": 0
                                }
                            ],
                            "uuid": "bcaec41f-f14e-48d9-9ae3-f014da9ce814",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "w: 1 2",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "Everything is an object.  So they have methods.\n\nScala has ",
                                    "uuid": "410f3414-0720-4ca8-9ac5-12ec8b4c0ec4",
                                    "version": 0
                                },
                                {
                                    "type": "code",
                                    "source": "\"hello\".toUpperCase()\n\"hello\".toUpperCase\n\n1.toDouble()\n1.toDouble\n\n1.toString()\n1.toString",
                                    "uuid": "8d6a682e-462d-40e8-bdd2-c5096fd17871",
                                    "version": 0
                                }
                            ],
                            "uuid": "2ef11a87-b26c-497e-8c66-d3f9936c9fed",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "w: 1 2",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "Arrays and lists",
                                    "uuid": "27d86bd8-8f10-4abe-9882-40012e59daa9",
                                    "version": 0
                                },
                                {
                                    "type": "code",
                                    "source": "Array(1,2,3)\t\t\t\t\t// Array[Int]\nArray[Double](1,2,3)\n\nList(1,2,\"Hello\", \"World)\t\t// List[Any]\nList[String](\"Hello\", \"world\")",
                                    "uuid": "35c6401b-1cc1-4fd2-b9c0-5f749ce44ca4",
                                    "version": 0
                                }
                            ],
                            "uuid": "cee5fad1-aeca-42b2-873c-a1931790cd7c",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "w: 1 2",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "Tuple",
                                    "uuid": "0384b0b1-f57b-4dfa-a465-ed7e44afc209",
                                    "version": 0
                                },
                                {
                                    "type": "code",
                                    "source": "(\"Hello\", 43)\t\t\t\t\t// (String, Int)",
                                    "uuid": "630510ee-2941-4f35-9738-dc6ea49ae3c7",
                                    "version": 0
                                }
                            ],
                            "uuid": "223e3afe-0273-4bb1-8090-48637f84c5f3",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "w: 1 2",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "Map",
                                    "uuid": "730ffddb-d4d7-4a79-be21-bdbccb9ed562",
                                    "version": 0
                                },
                                {
                                    "type": "code",
                                    "source": "Map(\"Jack\" -> 42, \t\t\t\t// Map[String,Int]\n\t\"Mary\" -> 43,\n    \"John\" -> 44)\n    \nMap[String, Double](\n\t\"Jack\" -> 42,\n    \"Mary\" -> 43, \n    \"John\" -> 44)",
                                    "uuid": "a1253a78-6e11-49c3-b690-a5512089ee8f",
                                    "version": 0
                                }
                            ],
                            "uuid": "e84d1037-8b7e-445c-bf96-503dcaca61df",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "By default, all containers are immutable, so one cannot add or delete items.\n\nYou get the mutable versions by importing the `scala.collection.mutable` module.",
                                    "uuid": "b1091407-e0a7-4bc0-a03d-d957bc2b25b4",
                                    "version": 0
                                },
                                {
                                    "type": "code",
                                    "source": "import scala.collection.mutable._\n\nval a = MutableList(1,2,3)\na += 10",
                                    "uuid": "1d3fe4d9-1e96-4473-83dc-adafee3f887e",
                                    "version": 0
                                }
                            ],
                            "uuid": "a917dc11-e718-4442-9aca-05e59d7ac466",
                            "version": 0
                        }
                    ],
                    "uuid": "574e6475-4484-4d39-b37b-cea1c89c9a2f",
                    "version": 0
                },
                {
                    "type": "section",
                    "source": "Symbols and bindings",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "w: 2 1",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "- Values:\n  ```\n  val a = ...\n  val a:Int = ...\n  ```\n  \n- Variables\n  ```\n  var x = ...\n  var x:Int = ...\n  x = x + 1\n  ```",
                                    "uuid": "841cdb34-d772-4da5-83b1-ca7c95ec1de2",
                                    "version": 0
                                },
                                {
                                    "type": "markdown",
                                    "source": "css:\n  color: blue\n....................\nScala performs _type inference_, which means that it trys to fill in any missing type information whenever possible.",
                                    "uuid": "a390f490-9570-4d4f-b4a3-d26371d36629",
                                    "version": 0
                                }
                            ],
                            "uuid": "1f9cf567-9e81-43bf-b03b-8a331d7a6898",
                            "version": 0
                        }
                    ],
                    "uuid": "156e6707-06f4-4c27-bcdc-7f36cbc1f090",
                    "version": 0
                },
                {
                    "type": "section",
                    "source": "Expressions, and no statements",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "- Everything is an expression.\n  > Everything in Scala evaluates to some value, even if the evaluation has side effects.\n  \n- `println(\"hello\")` = ?\n  > There is a special type `Unit`.  It's equivalent to `void` in Java/C/C++.\n  > Theoretically, `val a: Unit` can only take on a `Unit` value, and nothing else, so it effectively has _no information_.\n  \n",
                                    "uuid": "de0a4db5-966b-4e17-83e6-280cd6b4a44f",
                                    "version": 0
                                },
                                {
                                    "type": "markdown",
                                    "source": "- Block expression:\n  ~~~\n  {\n    E1\n    E2\n    ...\n    E_last\n  }\n  ~~~\n  The block evaluates to the last expression.",
                                    "uuid": "f58d7521-e314-4a3c-943a-ca38dae58ef4",
                                    "version": 0
                                }
                            ],
                            "uuid": "83ce17e4-fab7-4691-abf6-48679bb46ea6",
                            "version": 0
                        }
                    ],
                    "uuid": "e45bd61b-4217-4a09-9d2e-830a1fddc464",
                    "version": 0
                },
                {
                    "type": "section",
                    "source": "Iteration",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "- Simple form of `for`\n  > <pre>\n  <b>for</b>(x <- <i>sequence-expression</i>) <i>body</i>\n  </pre>\n  where _body_ is an expression that is evaluated repeatedly with the symbol _x_ binding to the elements in _sequence-expression_.\n  \n  > ><note/> The for-loop is an expression of the type `Unit`.  So it doesn't return any value.",
                                    "uuid": "d1ee1ffe-4108-470f-b22f-428f4d54ac2d",
                                    "version": 64
                                },
                                {
                                    "type": "code",
                                    "source": "for(x <- List(\"hello\", \"world\"))\n  println(x.toUpper)\n  \nfor(x <- 0 to 10) println(x)\n  \nfor(x <- 0 until 10) println(x)",
                                    "uuid": "3abd59b8-22ab-4fec-8b1a-5248b7922095",
                                    "version": 0
                                }
                            ],
                            "uuid": "b3221934-c29c-465e-bebc-19948004f900",
                            "version": 64
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "- List comprehension\n  > 1. filters unwanted elements in the sequence.\n  > 2. transforms each element\n  > 3. nested iteration in a single _for_ expression",
                                    "uuid": "9e2833f7-96e1-4c90-96f9-8cbb9d6021e4",
                                    "version": 0
                                },
                                {
                                    "type": "code",
                                    "source": "/* all pairs of numbers that satifies\n  2*x + 3*y = 78 */\n for {\n     x <- 0 to 78\n     y <- 0 to 78\n     if 2*x + 3*y == 78\n     answer = (x, y)\n } println(answer)",
                                    "uuid": "1c354156-5996-4c4b-922c-9964e782c074",
                                    "version": 0
                                }
                            ],
                            "uuid": "e7636bcd-e294-422e-91e8-577b009be223",
                            "version": 0
                        }
                    ],
                    "uuid": "4adb89fb-b21a-40b8-9141-ffe76daf16f9",
                    "version": 64
                },
                {
                    "type": "section",
                    "source": "While / Do loops",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "- While\n  ><pre>\n  <b>while</b>( <i>bool-expression</i> ) E\n  </pre>\n  \n- Do\n  > <pre>\n  <b>do</b> E <b>while</b>( <i>bool-expression</i> )\n  </pre>\n  ",
                                    "uuid": "6f926eb6-f8cf-4f15-9b1b-5878884b6f6b",
                                    "version": 0
                                }
                            ],
                            "uuid": "5b9ba5dc-d2f2-4f64-a58a-12bd3877ad50",
                            "version": 0
                        }
                    ],
                    "uuid": "61846227-8bb8-4bce-8987-79d507855072",
                    "version": 0
                },
                {
                    "type": "section",
                    "source": "Try-catch and exceptions",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "- Try / catch \n  > <pre>\n  <b>try</b> E1\n  <b>catch</b> {\n    <b>case</b> <i>symbol</i> : <i>Throwable</i> => E2\n    <b>case</b> <i>symbol</i> : <i>Throwable</i> => E3\n    ...\n  } <b>finally</b> E_finally\n  </pre>",
                                    "uuid": "a5617351-b9b4-45aa-a8a5-12adb02109f1",
                                    "version": 0
                                },
                                {
                                    "type": "markdown",
                                    "source": "- Throw\n  > <pre><b>throw</b> E </pre>\n  We must have E evaluating to an object belonging to a subtype of _Throwable_.",
                                    "uuid": "8f5d19be-61bd-47b4-a7a8-d6fc75ee5130",
                                    "version": 0
                                }
                            ],
                            "uuid": "1814a807-bd65-4729-a801-3aedb4c8e455",
                            "version": 0
                        }
                    ],
                    "uuid": "e0a25edf-2df6-45ec-b98b-79955a49ab64",
                    "version": 0
                },
                {
                    "type": "section",
                    "source": "If-else",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "Scala treats `if-else` different from `if` without `else`.\n\n- If/else\n  > <pre>\n  <b>if</b> (<i>cond</i>) E1 <b>else</b> E2\n  </pre>\n  This is evaluated to either E1 or E2 depending on the value of _cond_.\n  \n- If\n  > <pre><b>if</b> (<i>cond</i>) E1</pre>\n  >\n  > Without `else`, this *always* evaluates to `Unit`.  So, this form of `if` is only useful if `E1` has side effects.",
                                    "uuid": "5d3669af-3175-4d77-bd96-f1519aa796bf",
                                    "version": 0
                                },
                                {
                                    "type": "markdown",
                                    "source": "Challenge yourself with:\n\n1. Can you guess the value of :\n> ~~~\n  if(1==2) \"Hello\" else 100\n  ~~~\n\n2. What about the type of the evaluation of the expression above?\n\n  > Does it make sense?",
                                    "uuid": "b3b6fb06-cd77-44c4-a142-9cc825a33c46",
                                    "version": 0
                                }
                            ],
                            "uuid": "1e67c397-c1bf-4d18-9817-be85c556765a",
                            "version": 0
                        }
                    ],
                    "uuid": "b2f736dd-a387-475d-befc-470407c559c0",
                    "version": 0
                },
                {
                    "type": "section",
                    "source": "Match",
                    "children": [
                        {
                            "type": "box",
                            "layout": "vertical",
                            "source": "w: 1 0\n.............\n**Note**: _match expressions are really powerful._",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "- Match\n  > <pre>\n  E <b>match</b> {\n    <b>case</b> <i>pattern-1</i> => E1\n    <b>case</b> <i>pattern-2</i> => E2\n    <b>case</b> _ => E_last\n  }</pre>",
                                    "uuid": "fc0921a8-f0e4-4163-8ead-f7714bcd5b01",
                                    "version": 0
                                },
                                {
                                    "type": "code",
                                    "source": "css:\n  marginLeft: auto\n...............\nval mixed = List(\"Hello\", 1, Array())\n\nfor(elem <- mixed)\n  elem match {\n    case x : String => println(\"String\", x)\n    case x : Int    => println(\"Int *100\", x * 100)\n    case _          => println(\"Don't know what it is.\")\n  }",
                                    "uuid": "b6fcc3bd-6d43-457e-bc32-7ca08df1dc1a",
                                    "version": 0
                                }
                            ],
                            "uuid": "3865193a-4ff1-4571-9926-be27d651c32d",
                            "version": 0
                        }
                    ],
                    "uuid": "1884c9f2-8080-4dee-ac89-b56223a17103",
                    "version": 0
                }
            ],
            "uuid": "d2255856-0b61-44c7-be45-ff5d9ea8f0c7",
            "version": 64
        },
        {
            "type": "page",
            "source": "Lists",
            "children": [
                {
                    "type": "section",
                    "source": "Working with lists",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "w: 2 1",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "To process list, we have\n\n1. Looping\n2. Iteration\n\nThe best way is using list methods, with _callbacks_ <span class=\"fa fa-bolt\"></span>.\n\nLet's consider:\n\n```\nval list = 0 to 100\n```",
                                    "uuid": "ee7741c8-c0b6-4874-81e9-e94229ea0248",
                                    "version": 0
                                },
                                {
                                    "type": "markdown",
                                    "source": "css:\n  color: blue\n.......................\n <span class=\"fa fa-bolt\"></span> Callback is a programming pattern where functions (as values) are passed in as arguments.",
                                    "uuid": "22591f63-a028-42c3-855b-17d8625d9ff5",
                                    "version": 0
                                }
                            ],
                            "uuid": "2c80b358-df3d-4f8e-8137-15c3b84add9b",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "w: 1 2",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "Transform each element.",
                                    "uuid": "eca06ed6-c626-484e-ac1a-7a159dbd6963",
                                    "version": 0
                                },
                                {
                                    "type": "code",
                                    "source": "list.map(i => 2*i)\n// 0, 2, 4, ... 200",
                                    "uuid": "452ea1a6-93d1-401f-90b2-2f6d6ee45418",
                                    "version": 0
                                }
                            ],
                            "uuid": "0e0e7778-3873-4881-9e8f-3312d54dbdfd",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "w: 1 2",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "Filter.",
                                    "uuid": "97896fc0-8c99-4a6a-8347-15399a0db9d4",
                                    "version": 0
                                },
                                {
                                    "type": "code",
                                    "source": "list.filter(i => i % 2 == 0)\n// 0, 2, 4, 6, ... 100\n\nlist.count(i => i % 2 == 0)\n// 51",
                                    "uuid": "8cee51f9-6da7-44b7-9d68-ce9a504498c1",
                                    "version": 0
                                }
                            ],
                            "uuid": "904b5bc9-4128-424e-ac43-7bb37a004ad6",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "w: 1 2",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "Iteration",
                                    "uuid": "589f91ce-9035-4e9c-a2b2-93a71a24fdfc",
                                    "version": 0
                                },
                                {
                                    "type": "code",
                                    "source": "list.foreach(\n  i => {\n    printf(\"circle area = %.2f\\n\", 3.1415f * i * i))\n  })",
                                    "uuid": "7a02b286-fedd-405d-8631-5c817f712bb7",
                                    "version": 0
                                }
                            ],
                            "uuid": "686c6d93-3fd7-442e-8d48-26dc61bbfa20",
                            "version": 0
                        }
                    ],
                    "uuid": "f8c2f174-4b21-4bc8-ad63-51dc2b30f8f8",
                    "version": 0
                }
            ],
            "uuid": "9430af48-5285-4d71-8294-10636ee815fc",
            "version": 0
        }
    ],
    "uuid": "2bc7c570-9ea5-4842-84a4-10430acb37b3",
    "modified": false,
    "version": 64,
    "history": 6
}