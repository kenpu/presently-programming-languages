{
    "type": "article",
    "source": "Scala Object Oriented Programming",
    "children": [
        {
            "type": "page",
            "source": "Defining Classes",
            "children": [
                {
                    "type": "section",
                    "source": "(Generic) Classes with primary constructor",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "w: 1  3",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "- Classes are types, declared like Java classes.\n- Can have generic type parameters.\n- Must have a _primary_ constructor.\n  > The primary constructor has non-Java syntax.",
                                    "uuid": "cc5acdae-428e-40d2-af7b-ee579c8550a3",
                                    "version": 0
                                },
                                {
                                    "type": "code",
                                    "source": "lang: scala\n.......................\nclass Triple[S, T, U](x1: S, x2: T, x3: U) {\n  var first = x1\n  var second = x2\n  var third = x3\n  \n  println(s\"\"\"Hey, you have just created me:\n             |($x1, $x2, $x3)\"\"\")\n             \n  def swapFirstSecond(): Unit = {\n    this.first, this.second = (this.second, this.first)\n  }\n}",
                                    "uuid": "9a881fc0-2d1d-46cb-b1ad-ea5120e9eeec",
                                    "version": 0
                                }
                            ],
                            "uuid": "62da3212-9621-49bc-b7bd-d097ac702e18",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "w: 1 0",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "- Scala allows `val` or `var` as fields.\n- Inside the class body, we can have:\n  1. Fields\n  2. Methods\n  3. Arbitrary code as part of the primary constructor",
                                    "uuid": "b6fb8498-4329-4aa9-b8dc-3242663f0ed7",
                                    "version": 0
                                },
                                {
                                    "type": "markdown",
                                    "source": "<pre>\n<b>class</b> Name [<i>type parameters</i>] ( <i>param-list</i> ) {\n  <i>class-body</i>\n}\n</pre>",
                                    "uuid": "ccc615a5-e0c9-4308-9c75-f244ae3766de",
                                    "version": 0
                                }
                            ],
                            "uuid": "84234bc3-61e0-409b-9c4d-4618788be21f",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "Class body is optional.  We can just have empty class definitions.\n",
                                    "uuid": "c443afbf-d5dc-402d-b915-18dc0e71854b",
                                    "version": 0
                                },
                                {
                                    "type": "code",
                                    "source": "lang: scala\n...................\nclass A\nclass B(x: Int)\n",
                                    "uuid": "68464d79-a147-4966-a7e5-b7c615ea6992",
                                    "version": 0
                                }
                            ],
                            "uuid": "f96b2ee4-9a6f-46e7-b240-f8b4a58ba676",
                            "version": 0
                        }
                    ],
                    "uuid": "3c7aa9ec-2fa4-4503-850b-933bf40cce30",
                    "version": 0
                },
                {
                    "type": "section",
                    "source": "Fields, Methods and other constructors",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "w: 1 0",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "1. Any `val` or `var` symbol declared in the body of the class is a _field_ of the class.\n  > The usual modifier of `private` can be used.\n2. Methods are declared by the keyword `def`.\n3. Any methods with the special name `this` is a constructor.\n   > `def this(...)` defines contructors in addition to the primary constructor.",
                                    "uuid": "4e9bb814-bda8-4f72-8b32-b78fd3c196ac",
                                    "version": 0
                                },
                                {
                                    "type": "code",
                                    "source": "lang: scala\n..................\nclass Rational(n: Int, d: Int) {\n  val num = n\n  val denum = d\n  def this(n: Int) = this(n, 1)\n  def str : String = num + \"/\" + denum\n}",
                                    "uuid": "87524f52-12d3-41ad-914e-0897856e6821",
                                    "version": 0
                                }
                            ],
                            "uuid": "945944c6-901a-4161-9f4a-6041616cec3e",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "## More on the parameters",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "_For class parameters_\n\n- Declare fields directly\n  <pre>\n  class Rational(<b>val</b> num:Int, <b>val</b> denum: Int) {\n    <strike>val num = n</strike>\n    <strike>val denum = d</strike>\n    <i>... same as before</i>\n  }\n  </pre>\n  \n- Parameter with default value\n  <pre>\n  class Rational(val num:Int, <b style=color:blue>val denum: Int = 1</b>) {\n    ...\n    <strike>def this(n: Int) = this(n, 1)</strike>\n    ...\n  }\n  </pre>",
                                    "uuid": "c9c8bc80-4ae3-45d2-9aeb-f97b14257115",
                                    "version": 0
                                }
                            ],
                            "uuid": "6d22af58-a94f-4d48-acbb-a21683425872",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "w: 1 0",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "This is a really succinct definition of triples.",
                                    "uuid": "0f233052-6eba-4134-bdbe-8b42b4fa7acc",
                                    "version": 0
                                },
                                {
                                    "type": "code",
                                    "source": "lang: scala\n..........................\nclass Triple[S,T,U](val x:S, val y:T, val z:U)",
                                    "uuid": "b1f98684-dd46-4ef9-8b18-6c3522bcccf3",
                                    "version": 0
                                }
                            ],
                            "uuid": "d24e8615-df9b-4487-8827-c342ae504762",
                            "version": 0
                        }
                    ],
                    "uuid": "acd9b2cb-57d7-4f0b-bb10-aa5a86b2a936",
                    "version": 0
                },
                {
                    "type": "section",
                    "source": "Building class hierarchy with inheritance",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "Scala supports inheritance using a Java-like `extends` keyword.\n\nBut there are some details we need to pay attention to.",
                                    "uuid": "13335c0a-3bca-4149-a740-74f6d623557c",
                                    "version": 0
                                }
                            ],
                            "uuid": "eb5696d1-ede9-481a-b20b-a0a950143588",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "w: 1 0",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "Subclass needs extend a superclass with its class parameters.",
                                    "uuid": "581f7967-5501-413f-844a-fdd56d5fe2f9",
                                    "version": 0
                                },
                                {
                                    "type": "code",
                                    "source": "lang: scala\n...............\nclass Person(n: String) {\n  val name = n\n}\n\nclass Student(n: String, id: Int) extends Person(n) {\n  val studentId = id\n}\n\nclass Doctor(n: String) extends Person(\"Dr. \" + n)",
                                    "uuid": "69136ad9-a155-47a5-a049-002ed4cc0217",
                                    "version": 0
                                }
                            ],
                            "uuid": "be8ae23a-8a14-4f9b-ba29-55cea2006f75",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "w: 1 0",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "Any fields or methods that the subclass redefines must be marked by `override` modifier in its declaration.",
                                    "uuid": "e4c2fb70-9631-47bf-9a0a-e5496aaf68a6",
                                    "version": 0
                                },
                                {
                                    "type": "code",
                                    "source": "lang: scala\n...............\nclass Person(n: String) {\n  val name = n\n  def hello(message: String):Unit = {\n    println(\"Hi, \" + message)\n  }\n}\n\nclass Doctor(n: String) extends Person(\"Dr. \" + n) {\n  override def hello(message: String):Unit = {\n    println(s\"My name is ${this.name}. ${message}\")\n  }\n}",
                                    "uuid": "293ff8b9-521a-4a03-89ae-f84772bd297e",
                                    "version": 0
                                }
                            ],
                            "uuid": "43a01c81-b4e3-476f-a166-f6412298028f",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "Suppose we have:\n> ~~~\nclass Person(val name: String)\n~~~\n\nIf we want to extend it to student records, we need to override `val name` field.\n\n> <pre>\nclass Student(<b>override</b> val name:String, val studentId: Int) extends Person(val)\n</pre>",
                                    "uuid": "8f7947bd-8a90-4d8b-bfb4-bb5ed12fffd0",
                                    "version": 0
                                }
                            ],
                            "uuid": "18e7a784-9e86-41dd-9a8f-54cb5421e678",
                            "version": 0
                        }
                    ],
                    "uuid": "06a07924-d9fa-41e7-bf79-d90d213bbf3a",
                    "version": 0
                },
                {
                    "type": "section",
                    "source": "Constraints on generic type parameters",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "w: 1 2",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "Various ways of type parameterization",
                                    "uuid": "43c08055-d836-469a-84db-955468d55082",
                                    "version": 0
                                },
                                {
                                    "type": "code",
                                    "source": "lang: scala\n..............................\n// variance\nclass Container[T] { ... }\nclass Container[+T] {...}\nclass Container[-T] {...}\n\n// bounds\nclass Group1[P <: Person]\nclass Group2[P >: Doctor]\nclass Group3[P >: Doctor <: Person]\n\n// both\nclass Group3[+P >: Doctor <: Person]",
                                    "uuid": "16a85640-fa31-4e14-a1b9-0fce15fd56c0",
                                    "version": 0
                                }
                            ],
                            "uuid": "502d1567-98fe-46fd-9d66-7bf7af1ab535",
                            "version": 0
                        }
                    ],
                    "uuid": "c0df2310-0897-41db-9724-978ec4491dfe",
                    "version": 0
                }
            ],
            "uuid": "8d882930-9254-4732-9ea1-094d34d4e5b2",
            "version": 0
        },
        {
            "type": "page",
            "source": "Objects",
            "children": [
                {
                    "type": "section",
                    "source": "Instantiation of classes",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "w: 1 2",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "Scala uses the familiar `new` keyword to instantiate a class into an object.\n",
                                    "uuid": "2760727e-9ee0-44a3-8d88-819c6d61f477",
                                    "version": 0
                                },
                                {
                                    "type": "code",
                                    "source": "val superman = new Person(\"Clark Kent\")\nsuperman.hello(\"Hi there.\")",
                                    "uuid": "8da8fad0-1d09-43d5-ab2a-917c0e452c05",
                                    "version": 0
                                }
                            ],
                            "uuid": "192cdd71-d200-4853-afaf-6cb1c88e5531",
                            "version": 0
                        }
                    ],
                    "uuid": "1a039f96-6685-4db4-9987-88632dd8efcf",
                    "version": 0
                },
                {
                    "type": "section",
                    "source": ".................\nSingletons: buiding objects without a class",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "- Singleton\n  > In certain situation, it is only appropriate to have a _single_ instance to a class.\n  >\n  > > <note/> Can you think of a real-life example?\n  \n",
                                    "uuid": "cc4d8870-3f81-4995-a910-0d8b026211f4",
                                    "version": 0
                                }
                            ],
                            "uuid": "5b32ba5a-b915-424c-9b5d-d4af25ad6383",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "- Java does not offer any natural way of defining singletons.\n  > Java insists that in order to create an object, you must;\n  > 1. Define a class `ClassOfObject`,\n  > 2. Instantiate an object from its class `new ClassOfObject(...)`.",
                                    "uuid": "8ffa9342-126c-4825-a313-c1ea67b22755",
                                    "version": 0
                                }
                            ],
                            "uuid": "84886693-3064-4c53-8c23-c9e3d6b647c2",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "- Scala can define objects _directly_\n  > Scala allows taking a shortcut.  One can define an object without a class.\n\n> <note/> Since there is no class, there cannot be another instantiation.",
                                    "uuid": "8f601bc6-5dfa-42fb-b0bc-af5e91cee5f5",
                                    "version": 0
                                },
                                {
                                    "type": "code",
                                    "source": "lang: scala\n.........................\nobject Superman {\n  val name = \"Clark Kent\"\n  def hello(message: String): Unit = {\n    ...\n  }\n}\n\nprintln(Superman.name)\nSuperman.hello(\"Hi there.\")",
                                    "uuid": "72ce97ba-4b24-4e4c-899e-10283ceaf428",
                                    "version": 0
                                }
                            ],
                            "uuid": "53c0d925-ec06-4e33-bc80-27caa0129529",
                            "version": 0
                        }
                    ],
                    "uuid": "22f674cc-1e7f-4f2e-88fc-cd8011af4c72",
                    "version": 0
                },
                {
                    "type": "section",
                    "source": "Companion objects",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "1. Scala can define `class` and `object`.\n2. Given a class `X`, if there is an object with the _same_ name `X`, then we say that the _object_ `X` is a companion object of the class `X`.\n  > - Companion objects simulates `static` methods and fields of Java classes.\n  > - Companion objects can access all _private_ fields, methods and constructors of the companion class.",
                                    "uuid": "bb7c89fc-cda9-4cb9-8371-64e37c3c1635",
                                    "version": 0
                                }
                            ],
                            "uuid": "aca713db-5fa6-48cb-ac54-abcb19147c21",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "vertical",
                            "source": "",
                            "children": [
                                {
                                    "type": "box",
                                    "layout": "horizontal",
                                    "source": "w: 0 0",
                                    "children": [
                                        {
                                            "type": "code",
                                            "source": "lang: scala\n.....................\n// A person class\nclass Person(n: String) {\n  ...\n}",
                                            "uuid": "1a9e52e1-694f-4f74-b356-a246f8abf012",
                                            "version": 0
                                        },
                                        {
                                            "type": "code",
                                            "source": "lang: scala\n.....................\n// A companion object of `Person`\nobject Person {\n  def make(name: String): Person = new Person(name)\n  def Superman: Person = {\n  \tnew Person(\"Clark Kent\")\n  }\n}",
                                            "uuid": "0da6ede4-5f77-4da4-916e-4443b03ba3f7",
                                            "version": 0
                                        }
                                    ],
                                    "uuid": "413273f2-3663-49db-96a3-58fc18262e04",
                                    "version": 0
                                },
                                {
                                    "type": "code",
                                    "source": "lang: scala\n..................................\n// Now we can use the companion object methods\nval myself = Person.make(\"Ken Pu\")\nval superman = Person.Superman()",
                                    "uuid": "f1faa580-9ef6-465f-88c4-57ae07f0911c",
                                    "version": 0
                                }
                            ],
                            "uuid": "1c9cd77f-4f22-4462-87d8-7f018e452ba4",
                            "version": 0
                        }
                    ],
                    "uuid": "e373aceb-9a9d-4dfe-8c82-301c802c63c3",
                    "version": 0
                }
            ],
            "uuid": "33f68060-e3d0-49f1-9ce1-fc350ec35c9c",
            "version": 0
        },
        {
            "type": "page",
            "source": "Methods & Invocation",
            "children": [
                {
                    "type": "section",
                    "source": "Simple object method invocation",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "- Scala supports the simple Java method invocation.  \n- But in addition, it supports a wide range of method invocation syntax.\n- The flexible method invocation rules make scala's syntactic style highly customizable and scalable.\n\nLet's say that we have\n\n~~~\nval obj = new MyClass(...)\n~~~\n",
                                    "uuid": "e9f3aa6f-08c2-4b2a-8485-ca9c3b72aeb6",
                                    "version": 0
                                }
                            ],
                            "uuid": "1f7d1d0c-48de-42ba-8608-d236affcd9ea",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "Simple invocation",
                                    "uuid": "5ff6e194-6b22-4597-9794-1e4fc67190b8",
                                    "version": 0
                                },
                                {
                                    "type": "code",
                                    "source": "obj.f(1,2,3)\nobj.g(1)",
                                    "uuid": "644cae79-b3bd-4d52-87b5-48b0f449a11a",
                                    "version": 0
                                }
                            ],
                            "uuid": "1002b295-fbf6-4fad-8b81-5c54bea36a51",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "Omission of dot, and omission of parenthesis for single argument methods.",
                                    "uuid": "e62ca76b-7b8d-488e-b250-e3767736b583",
                                    "version": 0
                                },
                                {
                                    "type": "code",
                                    "source": "obj f (1,2,3)  // == obj.f(1,2,3)\nobj g 1        // obj.g(1)",
                                    "uuid": "0852003e-6f91-4591-8ad8-c3d5e35883d3",
                                    "version": 0
                                }
                            ],
                            "uuid": "928e730c-86ba-4449-b4b0-520645cb0f62",
                            "version": 0
                        }
                    ],
                    "uuid": "fa3c43cb-42eb-4a24-8008-9d5151e22067",
                    "version": 0
                },
                {
                    "type": "section",
                    "source": "Methods as operators",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "w: 1 2",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "- The omission rule allows one to invoke methods like operators.\n  > More precisely, operators *are* methods.",
                                    "uuid": "ec912b1d-149b-4be5-aa57-74d5ecb52658",
                                    "version": 0
                                },
                                {
                                    "type": "code",
                                    "source": "val a = new MyClass(...)\nval b = new MyClass(...)\n\na.add(b)\t// classical method invocation\na add b     // `add` is a binary infix operator",
                                    "uuid": "89086dee-f394-4cad-b076-2038bd837dc9",
                                    "version": 0
                                }
                            ],
                            "uuid": "70ece91f-208f-40c1-aff1-eee1daab9c85",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "w: 1 2",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "- Scala allows a wide range of characters as part of symbol names:\n  ```\n  + ++ ::: <?> :->\n  ```\n- We can have variables and methods containing non-alphanumeric characters.",
                                    "uuid": "59ae6295-c3ad-4b85-8f34-81ca105e7a08",
                                    "version": 0
                                },
                                {
                                    "type": "code",
                                    "source": "val a = new MyClass(...)\nval b = new MyClass(...)\n\na.+(b)\na + b",
                                    "uuid": "381f8a5e-2d39-4a96-90b8-0916bfc349f2",
                                    "version": 0
                                }
                            ],
                            "uuid": "a8f39240-62b7-4163-b5f9-7c0c9929e486",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "w: 3 2",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "Challenge:\n\n> How do we explain the following as method invocation?\n  ~~~\n  - a\n  ~~~",
                                    "uuid": "a41d1142-98b6-4acb-9f74-8e652c361c5d",
                                    "version": 0
                                },
                                {
                                    "type": "markdown",
                                    "source": "css:\n  color: blue\n..........................\n- Formally the operator is `-`, and \n- there is only one operand `a`.\n- The operand comes after the operator.\n\n> <note/> The operator `-` is an unary prefix operator",
                                    "uuid": "a636f9cd-520e-4f55-aa28-7d9d1cda8420",
                                    "version": 0
                                }
                            ],
                            "uuid": "4ecef3a6-8ad5-4fde-b586-c039a3591df9",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "w: 1 0",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "`- a`\nis a syntactic variation of:\n`a.unary_-()`",
                                    "uuid": "84bb1260-1f93-4903-a0bd-89b0db0b7cd9",
                                    "version": 0
                                },
                                {
                                    "type": "code",
                                    "source": "lang: scala\n...........................\nclass Rational(val num: Int, val den: Int) {\n  ...\n  def unary_-(): Rational = {\n    new Rational(- this.num, this.den)\n  }\n}\n\nval x = new Rational(1, 2)\nval y = -x;",
                                    "uuid": "cb967adb-377a-4e29-a1ab-fd69da8b8a94",
                                    "version": 0
                                }
                            ],
                            "uuid": "403d1525-fa67-428d-88ca-7b60b1f85ce9",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "Back to binary operators:\n\n- `a op b` is equivalent to `a.op(b)`.\n  > The first operand is the object.\n\n- For certain operators, it's natural to have the second operand is the object.\n  > ~~~\n  > val a = new Node(\"content\")\n  > val names = new LinkedList[String]()\n  > a append names\n  > ~~~\n  > In this case, we want:\n  > \n  > `a append names` is equivalent to `names.append(a)`",
                                    "uuid": "12b2caad-1ee3-4da6-8bb9-38eac96e3c5b",
                                    "version": 0
                                }
                            ],
                            "uuid": "e7925e9b-6522-4bcf-bac1-940cff4944ed",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "The object selection is determined by the last character of the method/operator.\n\n> <note/> If the operator ends with `:`, then the second operand is the object.\n",
                                    "uuid": "1a0294a1-af68-4d71-be64-f55a729f7685",
                                    "version": 0
                                }
                            ],
                            "uuid": "ff52fc66-0b11-4f03-b11a-8c62ede0cd62",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "code",
                                    "source": "lang: scala\n........................\nclass LinkedList[T] {\n  def ::(elem: T):LinkedList[T] = {\n    ...\n  }\n}\n\nval list = new LinkedList[String]\n\"Clark Kent\" :: list",
                                    "uuid": "deb66e07-f778-4450-a084-54aa87baa803",
                                    "version": 0
                                }
                            ],
                            "uuid": "06f36b0a-db45-4ec7-8c00-17566cefcb4c",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "w: 1 0",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "Associativity refers to which operands are associated to which operator.\nThe association can be ambiguous without parentheses.",
                                    "uuid": "7219d3b3-9d22-44f5-8815-338f9d36ab4d",
                                    "version": 0
                                },
                                {
                                    "type": "markdown",
                                    "source": "```\na << b || c +++ d\n```\n\nWhich interpretation is correct?\n\n- `((a << b) || c) +++ d = (a.<<(b)).||(c).+++(d)`\n- `((a << b) || (c +++ d)) = (a.<<(b)).||(c.+++(d))`",
                                    "uuid": "08646a56-7ae2-4702-8d00-50ea55045b3b",
                                    "version": 2
                                }
                            ],
                            "uuid": "f1f9d388-1a09-40af-9a8d-6eeaf77f8981",
                            "version": 2
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "- Association is resolved by operator precedence.  \n- Operator with higher precedence is applied *first*.\n- An operator's precedence is determined by the first character of its name.",
                                    "uuid": "7d0d7f95-abfb-45ef-b456-e87bf03889bb",
                                    "version": 0
                                },
                                {
                                    "type": "markdown",
                                    "source": "1. `* / %`\n2. `+ -`\n3. `:`\n4. `= !`\n5. `< >`\n6. `&`\n7. `^`\n8. `|`\n9. alphanumeric methods",
                                    "uuid": "8cfa05da-84d0-46fa-ab13-924e7f3ff633",
                                    "version": 0
                                }
                            ],
                            "uuid": "718b844b-a344-4bb7-80c0-518dd328d6fa",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "For `a << b || c +++ d`, we have\n\n- The highest precedence is the `+++`.  So we first evaluate:\n  ~~~\n  a << b || (c +++ d)\n  ~~~\n- The next highest precedence is `<<`.  So we get:\n  ~~~\n  (a << b) || (c +++ d)\n  ~~~\n\nThe evaluation is:\n\n~~~\n(a.<<(b)).||(c.+++(d))\n~~~",
                                    "uuid": "ac6d3e83-f443-4028-bda5-68507837ed99",
                                    "version": 0
                                }
                            ],
                            "uuid": "939d14ab-1e04-4d82-9d14-3d9292c86293",
                            "version": 0
                        }
                    ],
                    "uuid": "6574d3c3-7cc5-4032-a0d3-d8fd197304aa",
                    "version": 2
                },
                {
                    "type": "section",
                    "source": "Objects as functions",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "The method `apply` is special to an object.\n\n> <note/> Any object `x` with the method `x.apply(...)` can be invoked as a function.\n>\n> The invocation `x(...)` is equivalent to `x.apply(...)`.",
                                    "uuid": "9bced493-ecac-4dad-8539-f4d40969367e",
                                    "version": 0
                                }
                            ],
                            "uuid": "f916ad12-1a52-4634-bd5d-bd69257464c9",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "Consider a class and an object:\n\n~~~\nclass Person {\n  def apply(message: String) {\n    println(\"Hi, \" + message)\n  }\n}\n\nval superman = new Person\n~~~",
                                    "uuid": "4143f313-c885-46d3-9333-7a83a735b72f",
                                    "version": 0
                                },
                                {
                                    "type": "markdown",
                                    "source": "The following are all equivalent:\n\n- Traditional method invocation\n  > ~~~\n    superman.apply(\"Hi there.\")\n    ~~~\n\n- Method as operator\n  > ~~~\n    superman apply \"Hi there\"\n    ~~~\n    \n- Object as function\n  > ~~~\n    superman(\"Hi there\")\n    ~~~",
                                    "uuid": "6927c8e6-e6a9-428c-9f82-dfb523f2cae1",
                                    "version": 0
                                }
                            ],
                            "uuid": "12ca2ca1-65ba-445d-9435-d8ad392cadb0",
                            "version": 0
                        }
                    ],
                    "uuid": "358f7114-26f7-4398-8671-bdeffaca8771",
                    "version": 0
                }
            ],
            "uuid": "85112b94-476b-4d65-a1d2-e68a4b9cd344",
            "version": 2
        },
        {
            "type": "page",
            "source": "Conclusion",
            "children": [
                {
                    "type": "section",
                    "source": "",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "- Scala is an object oriented programming (OOP) language.\n  > It provides a very pure abstraction of programming in terms of classes and objects.\n  >\n  > Over Java, Scala insists that all types are classes and all data are objects.\n  \n",
                                    "uuid": "3d1dfb6a-a116-4bfc-ba73-c312ea28b04e",
                                    "version": 0
                                },
                                {
                                    "type": "markdown",
                                    "source": "- Scala has a rich syntactic resolution system.\n  > Because of its pure OOP abstraction, all computation is done through method invocation.\n  \n  > Scala provides many different syntactic constructs for method invocation, thus making the program syntax highly scalable.",
                                    "uuid": "17f9fbd8-bd35-478b-8b72-91c514e7bb53",
                                    "version": 0
                                }
                            ],
                            "uuid": "c7a43902-036f-485d-a945-9f7de109ff54",
                            "version": 0
                        }
                    ],
                    "uuid": "2c553931-51a2-459d-a722-a2065b4ac9ff",
                    "version": 0
                },
                {
                    "type": "section",
                    "source": "Bit of warning",
                    "children": [
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "Scala allows programmers to be highly creative in terms of designing custom syntaxes.\n\nBe careful.  Any deviation from the traditional object method invocation should be for the sake of an *improved* readability of the program.",
                                    "uuid": "0c0bb297-6dc7-437c-b3ee-6b1eaf58a19f",
                                    "version": 0
                                }
                            ],
                            "uuid": "0494c5c2-b71b-4976-8128-1bf6680da7c6",
                            "version": 0
                        },
                        {
                            "type": "box",
                            "layout": "horizontal",
                            "source": "",
                            "children": [
                                {
                                    "type": "markdown",
                                    "source": "c: banner\ncss:\n  marginBottom: 800px\n...................\nThe End.",
                                    "uuid": "32d0badf-26aa-43d8-a5f6-43ea0727fb1d",
                                    "version": 0
                                }
                            ],
                            "uuid": "8c6a6de6-a7d5-416b-9483-a96113303922",
                            "version": 0
                        }
                    ],
                    "uuid": "5480942b-c537-4d65-980a-832280c9be05",
                    "version": 0
                }
            ],
            "uuid": "2954f0c5-2b6a-4ab5-b7eb-a678e1fdedf2",
            "version": 0
        }
    ],
    "uuid": "7645215f-6791-4903-9973-b647ab1a812d",
    "modified": true,
    "version": 2,
    "history": 6
}